// Generated by gencpp from file project_231/State.msg
// DO NOT EDIT!


#ifndef PROJECT_231_MESSAGE_STATE_H
#define PROJECT_231_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace project_231
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : car_vel(0.0)
    , car_accl(0.0)
    , us_dist(0.0)
    , us_rate(0.0)
    , us_accl(0.0)
    , obj_psi(0.0)  {
    }
  State_(const ContainerAllocator& _alloc)
    : car_vel(0.0)
    , car_accl(0.0)
    , us_dist(0.0)
    , us_rate(0.0)
    , us_accl(0.0)
    , obj_psi(0.0)  {
  (void)_alloc;
    }



   typedef float _car_vel_type;
  _car_vel_type car_vel;

   typedef float _car_accl_type;
  _car_accl_type car_accl;

   typedef float _us_dist_type;
  _us_dist_type us_dist;

   typedef float _us_rate_type;
  _us_rate_type us_rate;

   typedef float _us_accl_type;
  _us_accl_type us_accl;

   typedef float _obj_psi_type;
  _obj_psi_type obj_psi;




  typedef boost::shared_ptr< ::project_231::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project_231::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::project_231::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::project_231::State > StatePtr;
typedef boost::shared_ptr< ::project_231::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project_231::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project_231::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace project_231

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'project_231': ['/home/odroid/barc/workspace/src/project_231/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::project_231::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project_231::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_231::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project_231::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_231::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project_231::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project_231::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "99ffbc9b2ce9f309bebfb0d24dae7716";
  }

  static const char* value(const ::project_231::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x99ffbc9b2ce9f309ULL;
  static const uint64_t static_value2 = 0xbebfb0d24dae7716ULL;
};

template<class ContainerAllocator>
struct DataType< ::project_231::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project_231/State";
  }

  static const char* value(const ::project_231::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project_231::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 car_vel\n\
float32 car_accl\n\
float32 us_dist\n\
float32 us_rate\n\
float32 us_accl\n\
float32 obj_psi\n\
";
  }

  static const char* value(const ::project_231::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project_231::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.car_vel);
      stream.next(m.car_accl);
      stream.next(m.us_dist);
      stream.next(m.us_rate);
      stream.next(m.us_accl);
      stream.next(m.obj_psi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project_231::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project_231::State_<ContainerAllocator>& v)
  {
    s << indent << "car_vel: ";
    Printer<float>::stream(s, indent + "  ", v.car_vel);
    s << indent << "car_accl: ";
    Printer<float>::stream(s, indent + "  ", v.car_accl);
    s << indent << "us_dist: ";
    Printer<float>::stream(s, indent + "  ", v.us_dist);
    s << indent << "us_rate: ";
    Printer<float>::stream(s, indent + "  ", v.us_rate);
    s << indent << "us_accl: ";
    Printer<float>::stream(s, indent + "  ", v.us_accl);
    s << indent << "obj_psi: ";
    Printer<float>::stream(s, indent + "  ", v.obj_psi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT_231_MESSAGE_STATE_H
